import { onSnapshot, addDoc, setDoc, deleteDoc, runTransaction, namedQuery as namedQuery$1, getDoc, getDocFromServer, getDocFromCache, getDocs, getDocsFromServer, getDocsFromCache } from 'firebase/firestore';
import { useCallback } from 'react';
import { useQuery, hashQueryKey, useQueryClient, useInfiniteQuery, useMutation } from 'react-query';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var firestoreUnsubscribes = {};
var queryCacheUnsubscribes = {};
var eventCount = {};
function firestoreUnsubscribe(subscriptionHash) {
    var firestoreUnsubscribe = firestoreUnsubscribes[subscriptionHash];
    if (firestoreUnsubscribe && typeof firestoreUnsubscribe === "function") {
        firestoreUnsubscribe();
    }
    delete firestoreUnsubscribes[subscriptionHash];
    delete eventCount[subscriptionHash];
}
function queryCacheUnsubscribe(subscriptionHash) {
    var queryCacheUnsubscribe = queryCacheUnsubscribes[subscriptionHash];
    if (queryCacheUnsubscribe) {
        queryCacheUnsubscribe();
        delete queryCacheUnsubscribes[subscriptionHash];
    }
}
/**
 * Utility hook to subscribe to events, given a function that returns an observer callback.
 * @param queryKey The react-query queryKey
 * @param subscriptionKey A hashable key to store the subscription
 * @param subscribeFn Returns an unsubscribe function to the event
 * @param options
 * @returns
 */
function useSubscription(queryKey, subscriptionKey, subscribeFn, options) {
    var _this = this;
    var _a;
    var hashFn = (options === null || options === void 0 ? void 0 : options.queryKeyHashFn) || hashQueryKey;
    var subscriptionHash = hashFn(subscriptionKey);
    var queryClient = useQueryClient();
    var resolvePromise = function () { return null; };
    var rejectPromise = function () { return null; };
    var result = new Promise(function (resolve, reject) {
        resolvePromise = resolve;
        rejectPromise = reject;
    });
    result.cancel = function () {
        queryClient.invalidateQueries(queryKey);
    };
    if (options === null || options === void 0 ? void 0 : options.onlyOnce) {
        if (!options.fetchFn) {
            throw new Error("You must specify fetchFn if using onlyOnce mode.");
        }
        else {
            var enabled = (_a = options === null || options === void 0 ? void 0 : options.enabled) !== null && _a !== void 0 ? _a : true;
            if (enabled) {
                options
                    .fetchFn()
                    .then(resolvePromise)
                    .catch(function (err) {
                    rejectPromise(err);
                });
            }
        }
    }
    else {
        var subscribedToQueryCache = !!queryCacheUnsubscribes[subscriptionHash];
        if (!subscribedToQueryCache) {
            var queryCache = queryClient.getQueryCache();
            queryCacheUnsubscribes[subscriptionHash] = queryCache.subscribe(function (event) {
                if (!event || event.query.queryHash !== hashFn(queryKey)) {
                    return;
                }
                var query = event.query, type = event.type;
                if (type === "queryRemoved") {
                    delete eventCount[subscriptionHash];
                    queryCacheUnsubscribe(subscriptionHash);
                    firestoreUnsubscribe(subscriptionHash);
                }
                if (type === "observerAdded" || type === "observerRemoved") {
                    var observersCount = query.getObserversCount();
                    if (observersCount === 0) {
                        firestoreUnsubscribe(subscriptionHash);
                    }
                    else {
                        var isSubscribedToFirestore = !!firestoreUnsubscribes[subscriptionHash];
                        if (isSubscribedToFirestore) {
                            var cachedData = queryClient.getQueryData(queryKey);
                            var hasData = !!eventCount[subscriptionHash];
                            if (hasData) {
                                resolvePromise(cachedData !== null && cachedData !== void 0 ? cachedData : null);
                            }
                        }
                        else {
                            firestoreUnsubscribes[subscriptionHash] = subscribeFn(function (data) { return __awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return __generator(this, function (_b) {
                                    (_a = eventCount[subscriptionHash]) !== null && _a !== void 0 ? _a : (eventCount[subscriptionHash] = 0);
                                    eventCount[subscriptionHash]++;
                                    if (eventCount[subscriptionHash] === 1) {
                                        resolvePromise(data || null);
                                    }
                                    else {
                                        queryClient.setQueryData(queryKey, data);
                                    }
                                    return [2 /*return*/];
                                });
                            }); });
                        }
                    }
                }
            });
        }
    }
    var queryFn = function () {
        return result;
    };
    return useQuery(__assign(__assign({}, options), { queryFn: queryFn, queryKey: queryKey, retry: false, staleTime: Infinity, refetchInterval: undefined, refetchOnMount: true, refetchOnWindowFocus: false, refetchOnReconnect: false }));
}

function useFirestoreDocument(queryKey, ref, options, useQueryOptions) {
    var _this = this;
    var isSubscription = !!(options === null || options === void 0 ? void 0 : options.subscribe);
    if ((useQueryOptions === null || useQueryOptions === void 0 ? void 0 : useQueryOptions.enabled) && !ref) {
        throw new Error("useFirestoreDocument with key " + JSON.stringify(queryKey) + "  expected to recieve a document reference, but got \"undefined\".\n      Did you forget to set the options \"enabled\" to false?");
    }
    var source;
    var includeMetadataChanges;
    if ((options === null || options === void 0 ? void 0 : options.subscribe) === undefined) {
        source = options === null || options === void 0 ? void 0 : options.source;
    }
    if (options === null || options === void 0 ? void 0 : options.subscribe) {
        includeMetadataChanges = options.includeMetadataChanges;
    }
    var subscribeFn = useCallback(function (callback) {
        var unsubscribe = function () {
            // noop
        };
        if (ref) {
            unsubscribe = onSnapshot(ref, {
                includeMetadataChanges: includeMetadataChanges,
            }, function (snapshot) {
                // Set the data each time state changes.
                return callback(snapshot);
            });
        }
        return unsubscribe;
    }, [ref]);
    return useSubscription(queryKey, ["useFirestoreDocument", queryKey], subscribeFn, __assign(__assign({}, useQueryOptions), { onlyOnce: !isSubscription, fetchFn: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, (ref ? getSnapshot(ref, source) : null)];
        }); }); } }));
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
function useFirestoreDocumentData(queryKey, ref, options, useQueryOptions) {
    var _this = this;
    if ((useQueryOptions === null || useQueryOptions === void 0 ? void 0 : useQueryOptions.enabled) && !ref) {
        throw new Error("useFirestoreDocumentData with key " + JSON.stringify(queryKey) + "  expected to recieve a document reference, but got \"undefined\".\n      Did you forget to set the options \"enabled\" to false?");
    }
    var isSubscription = !!(options === null || options === void 0 ? void 0 : options.subscribe);
    var source;
    var includeMetadataChanges;
    if ((options === null || options === void 0 ? void 0 : options.subscribe) === undefined) {
        source = options === null || options === void 0 ? void 0 : options.source;
    }
    if (options === null || options === void 0 ? void 0 : options.subscribe) {
        includeMetadataChanges = options.includeMetadataChanges;
    }
    var subscribeFn = useCallback(function (callback) {
        var unsubscribe = function () {
            // noop
        };
        if (ref) {
            unsubscribe = onSnapshot(ref, {
                includeMetadataChanges: includeMetadataChanges,
            }, function (snapshot) {
                var _a;
                var data = snapshot.data({
                    serverTimestamps: options === null || options === void 0 ? void 0 : options.serverTimestamps,
                });
                if (data && (options === null || options === void 0 ? void 0 : options.idField)) {
                    data = __assign(__assign({}, data), (_a = {}, _a[options.idField] = snapshot.id, _a));
                }
                // Cannot figure out how to get this working without a cast!
                var _dataWithIdField = data;
                callback(_dataWithIdField);
            });
        }
        return unsubscribe;
    }, [ref]);
    var fetchFn = function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!ref) {
                return [2 /*return*/, null];
            }
            return [2 /*return*/, getSnapshot(ref, source).then(function (snapshot) {
                    var _a;
                    var data = snapshot.data({
                        serverTimestamps: options === null || options === void 0 ? void 0 : options.serverTimestamps,
                    });
                    if (data && (options === null || options === void 0 ? void 0 : options.idField)) {
                        data = __assign(__assign({}, data), (_a = {}, _a[options.idField] = snapshot.id, _a));
                    }
                    return data;
                })];
        });
    }); };
    return useSubscription(queryKey, ["useFirestoreDocument", queryKey], subscribeFn, __assign(__assign({}, useQueryOptions), { onlyOnce: !isSubscription, fetchFn: fetchFn }));
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
function useFirestoreInfiniteQuery(key, initialQuery, getNextQuery, options, useInfiniteQueryOptions) {
    var _a;
    return useInfiniteQuery({
        queryKey: (_a = useInfiniteQueryOptions === null || useInfiniteQueryOptions === void 0 ? void 0 : useInfiniteQueryOptions.queryKey) !== null && _a !== void 0 ? _a : key,
        queryFn: function (ctx) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var query;
                return __generator(this, function (_b) {
                    query = (_a = ctx.pageParam) !== null && _a !== void 0 ? _a : initialQuery;
                    return [2 /*return*/, getQuerySnapshot(query, options === null || options === void 0 ? void 0 : options.source)];
                });
            });
        },
        getNextPageParam: function (snapshot) {
            return getNextQuery(snapshot);
        },
    });
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
function useFirestoreInfiniteQueryData(key, initialQuery, getNextQuery, options, useInfiniteQueryOptions) {
    var _a;
    return useInfiniteQuery({
        queryKey: (_a = useInfiniteQueryOptions === null || useInfiniteQueryOptions === void 0 ? void 0 : useInfiniteQueryOptions.queryKey) !== null && _a !== void 0 ? _a : key,
        queryFn: function (ctx) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var query, snapshot;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            query = (_a = ctx.pageParam) !== null && _a !== void 0 ? _a : initialQuery;
                            return [4 /*yield*/, getQuerySnapshot(query, options === null || options === void 0 ? void 0 : options.source)];
                        case 1:
                            snapshot = _b.sent();
                            return [2 /*return*/, snapshot.docs.map(function (doc) {
                                    var _a;
                                    var data = doc.data({ serverTimestamps: options === null || options === void 0 ? void 0 : options.serverTimestamps });
                                    if (options === null || options === void 0 ? void 0 : options.idField) {
                                        data = __assign(__assign({}, data), (_a = {}, _a[options.idField] = doc.id, _a));
                                    }
                                    return data;
                                })];
                    }
                });
            });
        },
        getNextPageParam: function (data) {
            return getNextQuery(data);
        },
    });
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
function useFirestoreQuery(queryKey, query, options, useQueryOptions) {
    var isSubscription = !!(options === null || options === void 0 ? void 0 : options.subscribe);
    var source;
    var includeMetadataChanges;
    if ((options === null || options === void 0 ? void 0 : options.subscribe) === undefined) {
        source = options === null || options === void 0 ? void 0 : options.source;
    }
    if (options === null || options === void 0 ? void 0 : options.subscribe) {
        includeMetadataChanges = options.includeMetadataChanges;
    }
    if ((useQueryOptions === null || useQueryOptions === void 0 ? void 0 : useQueryOptions.enabled) && !query) {
        throw new Error("useFirestoreQuery with key " + JSON.stringify(queryKey) + "  expected to recieve a query or named query, but got \"undefined\".\n      Did you forget to set the options \"enabled\" to false?");
    }
    var subscribeFn = useCallback(function (callback) {
        var unsubscribe = function () {
            // noop
        };
        if (query) {
            resolveQuery(query).then(function (res) {
                unsubscribe = onSnapshot(res, {
                    includeMetadataChanges: includeMetadataChanges,
                }, function (snapshot) {
                    return callback(snapshot);
                });
            });
        }
        return unsubscribe;
    }, [query, queryKey]);
    return useSubscription(queryKey, ["useFirestoreDocument", queryKey], subscribeFn, __assign(__assign({}, useQueryOptions), { onlyOnce: !isSubscription, fetchFn: function () {
            return query
                ? resolveQuery(query).then(function (resolvedQuery) {
                    return getQuerySnapshot(resolvedQuery, source);
                })
                : new Promise(function (resolve) { return resolve(null); });
        } }));
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
function useFirestoreQueryData(queryKey, query, options, useQueryOptions) {
    var _this = this;
    if ((useQueryOptions === null || useQueryOptions === void 0 ? void 0 : useQueryOptions.enabled) && !query) {
        throw new Error("useFirestoreQueryData with key " + JSON.stringify(queryKey) + "  expected to recieve a query or named query, but got \"undefined\".\n      Did you forget to set the options \"enabled\" to false?");
    }
    var isSubscription = !!(options === null || options === void 0 ? void 0 : options.subscribe);
    var source;
    var includeMetadataChanges;
    if ((options === null || options === void 0 ? void 0 : options.subscribe) === undefined) {
        source = options === null || options === void 0 ? void 0 : options.source;
    }
    if (options === null || options === void 0 ? void 0 : options.subscribe) {
        includeMetadataChanges = options.includeMetadataChanges;
    }
    var subscribeFn = useCallback(function (callback) {
        var unsubscribe = function () {
            // noop
        };
        if (query) {
            resolveQuery(query).then(function (res) {
                unsubscribe = onSnapshot(res, {
                    includeMetadataChanges: includeMetadataChanges,
                }, function (snapshot) {
                    var docs = snapshot.docs.map(function (doc) {
                        var _a;
                        var data = doc.data({
                            serverTimestamps: options === null || options === void 0 ? void 0 : options.serverTimestamps,
                        });
                        if (options === null || options === void 0 ? void 0 : options.idField) {
                            var withIdData = __assign(__assign({}, data), (_a = {}, _a[options.idField] = doc.id, _a));
                            return withIdData;
                        }
                        return data;
                    });
                    callback(docs);
                });
            });
        }
        return unsubscribe;
    }, [query, queryKey]);
    var fetchFn = function () { return __awaiter(_this, void 0, void 0, function () {
        var resolvedQuery, snapshot;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!query) {
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, resolveQuery(query)];
                case 1:
                    resolvedQuery = _a.sent();
                    return [4 /*yield*/, getQuerySnapshot(resolvedQuery, source)];
                case 2:
                    snapshot = _a.sent();
                    return [2 /*return*/, snapshot.docs.map(function (doc) {
                            var _a;
                            var data = doc.data({
                                serverTimestamps: options === null || options === void 0 ? void 0 : options.serverTimestamps,
                            });
                            if (options === null || options === void 0 ? void 0 : options.idField) {
                                data = __assign(__assign({}, data), (_a = {}, _a[options.idField] = doc.id, _a));
                            }
                            return data;
                        })];
            }
        });
    }); };
    return useSubscription(queryKey, ["useFirestoreDocument", queryKey], subscribeFn, __assign(__assign({}, useQueryOptions), { onlyOnce: !isSubscription, fetchFn: fetchFn }));
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
function useFirestoreCollectionMutation(ref, useMutationOptions) {
    return useMutation(function (data) {
        return addDoc(ref, data);
    }, useMutationOptions);
}
function useFirestoreDocumentMutation(ref, options, useMutationOptions) {
    return useMutation(function (data) {
        if (options) {
            return setDoc(ref, data, options);
        }
        return setDoc(ref, data);
    }, useMutationOptions);
}
function useFirestoreDocumentDeletion(ref, useMutationOptions) {
    return useMutation(function () { return deleteDoc(ref); }, useMutationOptions);
}
function useFirestoreTransaction(firestore, updateFunction, useMutationOptions) {
    return useMutation(function () {
        return runTransaction(firestore, updateFunction);
    }, useMutationOptions);
}
function useFirestoreWriteBatch(batch, useMutationOptions) {
    return useMutation(function () {
        return batch.commit();
    }, useMutationOptions);
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
var namedQueryCache = {};
function namedQuery(firestore, name) {
    var key = firestore.app.name + ":" + name;
    if (namedQueryCache[key]) {
        return namedQueryCache[key];
    }
    return function () {
        return namedQuery$1(firestore, name).then(function (query) {
            if (query) {
                namedQueryCache[key] = query;
                return query;
            }
            return null;
        });
    };
}

/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
function getSnapshot(ref, source) {
    return __awaiter(this, void 0, void 0, function () {
        var snapshot;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(source === "cache")) return [3 /*break*/, 2];
                    return [4 /*yield*/, getDocFromCache(ref)];
                case 1:
                    snapshot = _a.sent();
                    return [3 /*break*/, 6];
                case 2:
                    if (!(source === "server")) return [3 /*break*/, 4];
                    return [4 /*yield*/, getDocFromServer(ref)];
                case 3:
                    snapshot = _a.sent();
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, getDoc(ref)];
                case 5:
                    snapshot = _a.sent();
                    _a.label = 6;
                case 6: return [2 /*return*/, snapshot];
            }
        });
    });
}
function getQuerySnapshot(query, source) {
    return __awaiter(this, void 0, void 0, function () {
        var snapshot;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(source === "cache")) return [3 /*break*/, 2];
                    return [4 /*yield*/, getDocsFromCache(query)];
                case 1:
                    snapshot = _a.sent();
                    return [3 /*break*/, 6];
                case 2:
                    if (!(source === "server")) return [3 /*break*/, 4];
                    return [4 /*yield*/, getDocsFromServer(query)];
                case 3:
                    snapshot = _a.sent();
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, getDocs(query)];
                case 5:
                    snapshot = _a.sent();
                    _a.label = 6;
                case 6: return [2 /*return*/, snapshot];
            }
        });
    });
}
function isNamedQuery(query) {
    return typeof query === "function";
}
function resolveQuery(query) {
    return __awaiter(this, void 0, void 0, function () {
        var resolved;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!isNamedQuery(query)) return [3 /*break*/, 3];
                    if (!(typeof query === "function")) return [3 /*break*/, 2];
                    return [4 /*yield*/, query()];
                case 1:
                    resolved = _a.sent();
                    return [2 /*return*/, resolved];
                case 2: return [2 /*return*/, query];
                case 3: return [2 /*return*/, query];
            }
        });
    });
}

export { getQuerySnapshot, getSnapshot, namedQuery, resolveQuery, useFirestoreCollectionMutation, useFirestoreDocument, useFirestoreDocumentData, useFirestoreDocumentDeletion, useFirestoreDocumentMutation, useFirestoreInfiniteQuery, useFirestoreInfiniteQueryData, useFirestoreQuery, useFirestoreQueryData, useFirestoreTransaction, useFirestoreWriteBatch };
